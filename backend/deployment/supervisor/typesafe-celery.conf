; TypeSafe Celery Worker - Supervisor Configuration
; 
; Installation:
;   1. Copy to: /etc/supervisor/conf.d/typesafe-celery.conf
;   2. Update paths and environment variables
;   3. Run: sudo supervisorctl reread && sudo supervisorctl update
;   4. Start: sudo supervisorctl start typesafe-celery-worker

[program:typesafe-celery-worker]
; Command to run
command=/opt/typesafe/backend/venv/bin/celery -A app.agents.worker worker --loglevel=info --concurrency=4 --hostname=worker-%(host_node_name)s

; Directory to run from
directory=/opt/typesafe/backend

; User to run as
user=typesafe

; Number of processes (1 for main worker, scale with instances)
numprocs=1
process_name=%(program_name)s-%(process_num)s

; Auto-start on supervisor start
autostart=true

; Auto-restart on crash
autorestart=true

; Graceful shutdown
stopsignal=TERM
stopwaitsecs=300
stopasgroup=true
killasgroup=true

; Priority (lower starts first)
priority=999

; Redirect output to log files
redirect_stderr=true
stdout_logfile=/var/log/typesafe/celery-worker.log
stdout_logfile_maxbytes=50MB
stdout_logfile_backups=10
stderr_logfile=/var/log/typesafe/celery-worker-error.log
stderr_logfile_maxbytes=50MB
stderr_logfile_backups=10

; Environment variables
environment=
    PATH="/opt/typesafe/backend/venv/bin:/usr/local/bin:/usr/bin:/bin",
    PYTHONPATH="/opt/typesafe/backend",
    PYTHONUNBUFFERED="1",
    CELERY_BROKER_URL="redis://localhost:6379/0",
    CELERY_RESULT_BACKEND="redis://localhost:6379/1",
    REDIS_URL="redis://localhost:6379",
    ENVIRONMENT="production"

; Load additional environment from file
; Note: Supervisor doesn't natively support EnvironmentFile
; Use explicit environment variables or a wrapper script

; Resource limits
; (Requires supervisor-resource-limits plugin or manual ulimit in command)

