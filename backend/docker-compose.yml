version: '3.8'

services:
  # Redis - Message broker and result backend for Celery
  redis:
    image: redis:7-alpine
    container_name: typesafe-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    networks:
      - typesafe-network

  # Celery Worker - Asynchronous task processor
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: typesafe-celery-worker
    command: celery -A app.agents.worker worker --loglevel=info --concurrency=4
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - REDIS_URL=redis://redis:6379
      - PYTHONUNBUFFERED=1
      # Pass through API keys from host environment
      - GROQ_API_KEY=${GROQ_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./app:/app/app
    restart: unless-stopped
    networks:
      - typesafe-network

  # Flower - Celery monitoring UI (optional but recommended)
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: typesafe-flower
    command: celery -A app.agents.worker flower --port=5555 --broker=redis://redis:6379/0
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
    depends_on:
      - redis
      - celery-worker
    restart: unless-stopped
    networks:
      - typesafe-network

  # FastAPI Backend - REST API server
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: typesafe-api
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    ports:
      - "8000:8000"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=development
      # Pass through API keys from host environment
      - GROQ_API_KEY=${GROQ_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - BACKEND_API_KEY=${BACKEND_API_KEY}
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./app:/app/app
    restart: unless-stopped
    networks:
      - typesafe-network

volumes:
  redis-data:
    driver: local

networks:
  typesafe-network:
    driver: bridge

